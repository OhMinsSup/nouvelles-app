// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(uuid())
    name          String?
    username      String?   @unique
    email         String?   @unique
    emailVerified DateTime? @map(name: "email_verified")
    image         String?
    role          String? // New column
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @updatedAt @map(name: "updated_at")
    accounts      Account[]
    sessions      Session[]

    @@index([email])
    @@index([username])
    @@map(name: "users")
}

model Account {
    id                       String  @id @default(uuid())
    userId                   String  @map(name: "user_id")
    type                     String
    provider                 String
    providerAccountId        String  @map(name: "provider_account_id")
    refresh_token            String?
    refresh_token_expires_in Int?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique @map(name: "session_token")
    userId       String   @map(name: "user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map(name: "sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map(name: "verification_tokens")
}

model Item {
    id          Int        @id @default(autoincrement())
    neusralId   String?
    title       String?
    link        String?
    realLink    String?
    description String?
    image       String?
    pulbishedAt DateTime?
    categoryId  Int?
    newspaperId Int?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @default(now()) @updatedAt
    deletedAt   DateTime? // 삭제일 (soft delete)
    ItemTag     ItemTag[]
    Category    Category?  @relation(fields: [categoryId], references: [id])
    Newspaper   Newspaper? @relation(fields: [newspaperId], references: [id])

    @@index([neusralId])
    @@index([categoryId])
    @@index([newspaperId])
    @@map("items")
}

model Newspaper {
    id        Int       @id @default(autoincrement())
    name      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    deletedAt DateTime? // 삭제일 (soft delete)
    Item      Item[]

    @@index([name])
    @@map("newspapers")
}

model Category {
    id        Int       @id @default(autoincrement())
    name      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    deletedAt DateTime? // 삭제일 (soft delete)
    Item      Item[]

    @@index([name])
    @@map("categories")
}

model Tag {
    id        Int       @id @default(autoincrement())
    name      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    deletedAt DateTime? // 삭제일 (soft delete)
    ItemTag   ItemTag[]

    @@index([name])
    @@map("tags")
}

model ItemTag {
    item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId Int  @map(name: "item_id")
    tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId  Int  @map(name: "tag_id")

    @@id([itemId, tagId])
    @@index([itemId])
    @@index([tagId])
    @@map("item_tags")
}
